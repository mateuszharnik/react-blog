---
name: Tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - stage
      - develop
      - feature/*
      - task/*
      - improve/*
      - version/*
      - release/*
      - pre-release/*
      - bugfix/*
      - hotfix/*

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Jest:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      BASE_URL: ${{ vars.BASE_URL }}
      CLIENT_URL: ${{ vars.CLIENT_URL }}
      CLIENT_PORT: ${{ vars.CLIENT_PORT }}
      DEVTOOLS_ENABLED: ${{ vars.DEVTOOLS_ENABLED }}
      SERVER_URL: ${{ vars.SERVER_URL }}
      PORT: ${{ vars.PORT }}
      DB_URL: ${{ secrets.DB_URL }}
      LOGGER_ENABLED: ${{ vars.LOGGER_ENABLED }}
      RATE_LIMIT_ENABLED: ${{ vars.RATE_LIMIT_ENABLED }}
      RATE_LIMIT: ${{ vars.RATE_LIMIT }}
      DOCKER_MONGO_PORT: ${{ secrets.DOCKER_MONGO_PORT }}
      DOCKER_ADMIN_PANEL_PORT: ${{ secrets.DOCKER_ADMIN_PANEL_PORT }}
      ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
      REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
      DOCS_TOKEN_SECRET: ${{ secrets.DOCS_TOKEN_SECRET }}
      DOCS_PASSWORD: ${{ secrets.DOCS_PASSWORD }}
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      APP_ENV: "e2e"
      NODE_ENV: "test"
      SENTRY_FRONTEND_ENABLED: ${{ vars.SENTRY_FRONTEND_ENABLED }}
      SENTRY_FRONTEND_DSN: ${{ secrets.SENTRY_FRONTEND_DSN }}
      SENTRY_FRONTEND_AUTH_TOKEN: ${{ secrets.SENTRY_FRONTEND_AUTH_TOKEN }}
      SENTRY_FRONTEND_ORGANIZATION_NAME: ${{ secrets.SENTRY_FRONTEND_ORGANIZATION_NAME }}
      SENTRY_FRONTEND_PROJECT_NAME: ${{ secrets.SENTRY_FRONTEND_PROJECT_NAME }}

    steps:
      - name: Checkout branch üåø
        uses: actions/checkout@v4

      - name: Use Node.js ‚ú®
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install make package for Ubuntu üêß
        run: sudo apt-get install -y build-essential make

      - name: Enable corepack üß∂
        run: make install@corepack-enable

      - name: Install all global dependencies üåç
        run: make install@global

      - name: Yarn cache üì∑
        uses: actions/cache@v4
        env:
          cache-name: test-yarn-cache
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install all local dependencies üì¶
        run: yarn install

      - name: Create env file üíæ
        run: make create-env

      - name: Start Docker üê≥
        run: make docker@up-background

      - name: Run migrations üå±
        run: make migration@up-test

      - name: Run Jest üß™
        run: make test-ci

      - name: Archive code coverages üíº
        uses: actions/upload-artifact@v4
        with:
          name: jest-code-coverages
          path: coverage/*

      - name: Stop Docker üê≥
        run: make docker@down
